// ------  JAVA LANGUAGE ------//

/*Che cos'é un oggetto?*/

Gli oggetti sono le chiavi per capre la tecnologia orientata ad oggetti. Gli oggetti nel mondo
reale possiedono 2 caratteristiche: lo stato e il comportamento.
Un oggetto salva il proprio stato nei campi("variabili") e esprime il suo comportamento tramite
i metodi("funzioni"). I metodi operano sullo stato di un oggetto e regolano i meccanismi di 
interazioni fra oggetti.
Nasconendo lo stato interno e richiedendo che tutte le intnerazioni siano fatte tra oggetti, si
considerano  come un incapsulamento di dati.
Quindi gli oggetti rimangono nel controllo da come il mondo esterno concede il da farsi.
I benefici che si hanno con questo tipo di approccio sono:
- Modularità: Il codi per un oggetto può essere scritto e curato dal codice per altri oggetti.
	Una volta creato, un oggetto può facilmente essere passato all'interno del sistema.

- Nascondimento delle informazioni: interagento solo tramite metodi, i dettagli dell'implementazione
	interna rimane nascosta dal mondo esterno.

- Codice riutilizzabile: se un oggetto esiste già, si può usare quell'oggetto nel proprio programma.

- Pluggability and debugging

/*Che cos'è una classe?*/

Nel mondo reale si incontrano spesso tanti oggetti dello stesso tipo. Come per esempio esistono
tanti tipi di biciclette, ma tutte queste possono far parte dello stesso modello.
Allo stesso modo nel mondo orientato ad oggetti la bicicletta è una INSTANZA della CLASSE 
di oggetti conosciuti come biciletta.
Quindi una classe è un "blueprint" dal quale si creano tutti gli oggetti.

------ VEDERE PROGGETTO INTELLIJ BYCICLE PER UN ESEMPIO -----

Nell'esempo bisogna notar che la classe bycicle non contiene un main poiché non è una vera
e propria applicazione, ma è solo un blueprint per bycicles per essere usate in ua applicazione.

------ VEDERE PROGGETTO INTELLIJ BYCICLEDEMO IN BYCICLE PER UN ESEMPIO CON IL MAIN -----

/* Che cos'è Inheritance(Eridarietà)? */

Differenti tipi di oggetti spesso hanno un qualcosa in comune fra di loro o qualcosa che li rendono
differenti.
Il linguaggio orientato af oggetti permette alle clessi di erediare stati e comportamenti di altre
classi.

------ VEDERE PROGGETTO INTELLIJ MountainBikeIN BYCICLE PER UN ESEMPIO CON IL MAIN -----

/* Che cos'è una interfaccia? */

Gli oggetti definiscono le loro interazioni con il mondo esterno attraverso i metodi che possono
utilizzare. I metodi dell'oggetto si interfacciano con il mondo esterno.
Come per esempio i bottoni della televisione che sono l'interfaccia tra la parte elettrica e
la plastica.
Quindi nella loro espressione più comune una interfaccia è un gruppo di metodi collegati con 
assenza dei loro corpi.

/*Che cos'è un package */

Un package è un namespache che organizza un set di classe e interfacce. Concettualmente si può
pensare come differennti cartelle sul proprio computer.

//		VARIABILI

Il linguaggio Java definisce il seguente tipi di varibili:

- Variabili di istanza( Campi non statici): gli oggetti salvano i propri stati nei campi
	non statiti che sono dichiarati da static. I campi non statici sono anche chiamati come
	istanze di variabile poiché i loro valori sono unici per ogni istanza di una classe.

- Variabili di classe (campi statici): UNa variabile di classe è dichiarata in ogni campo
	con il modificatore static. Questo dice al compilatore che c'è esattamente una copia
	di questa variabile in esistenza.
	In aggiunta tramigte final si dichiara che quella variabile non cambia.

- Variabili locali: un metodo spesso salva il suo stato temporaneo nelle variabili locali.
	Le variabili locali sono visiili solo nel metodo in cui sono stati dichiarati e non 
	possono essere accessibili da altri metodi della classe.

- Parametri: non sono da confondere con i campi.

// TIPI DI DATO PRIMITIVI
Il linguaggio java è statcally-typed cioè che tutte le variabili devono essere dichiarate
prima che siano usate.
Il tipo di variabile determina ciò che la variabile può contenere più le operazioni che si
possono fare con esso. Ogni dato primitivo non condivide lo stato con altri valori primiti.
E questi sono:
-byte, short, int, long,float, double, boolean, char, String;

// GLI ARRAY
Un array è un oggetto contenitore che mantiene un numero fissato di valori di un singolo
tipo. La lunghezza dell'array è stabilita quando l'array viene creato. 
Ogni elemento di un array viene chiamato elemento ed ogni elemento viene acceduto dal
suo indice numerico

----	VEDERE PROGETTO ARRAY ----
// PER COSTRUTTI TIPO IF ELSE DO WHILE ECC.. VEDERE SITO ORACLE 


// CLASSI E OGGETTI	
class MyClass extends MySuperClass implements YourInterface {
    // field, constructor, and
    // method declarations
}

In generale la dichiarazione di una classe include i seguenti componenti.
1. Modificatori come publico e privato e altri
2. Il nome della classe con la lettera iniziale in maiuscolo
3. I noe delle classi padri se ce ne sono preceduto da "extend"
4. Una lista di interfacce separate dalla parola implementazione
5. Il copro della classe, circondato da parentesi graffe {}.

Ci sono vari tipi di variabili in una classe:
- Le variabili in una classe, detti campi;
- Le variabili in un meotodo o in un blocco di codice, dette variabili locali
- Le variabili nella dichiarazione di metodi, detti parametri.
//Access modifier
I modificatori vengno usati per controllare a quali campi le altre classi possono accedere.
public --> accedibile da tutte le classi
private --> accessibile solo dalla propria classe
Possono essere usati in combinazione con i tipi di dato.

//DEFINIZIONE DI METODI
1- Modificiatore pubblico/privato/ecc
2- il tipo di ritorno del metodo o void se non ritorna nulla
3- il nome del metodo
4- fra parentesi i parametri che accetta il metodo, separato da virgole
5- una lista di eccezioni
6- il corpo del metodo

----GLI OGGETTI---
Un tipico programma java crea molti oggeti che interagiscono tramite le chiamate di metodi.
La creaione di un oggetto avviene secondo queste 3 parti
-1) dichiarazione: ci sono tutte le variabili che vengono associate al tipo di oggetto
-2) Instanziazione: La parola new è usata per creare un oggetto
-3) Inizializzazione: l'operatore new è seguita da una chiamata al costruttore che inizializz
					il nuovo oggetto.


